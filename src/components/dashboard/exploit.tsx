"use client";

import { useEffect, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

interface Exploit {
  date: string;
  network: string;
  attackVector: string;
  amountLost: string;
  status: "Resolved" | "Ongoing" | "Partially Resolved";
}

const statusStyles = {
  Resolved: "bg-green-100 text-green-700",
  Ongoing: "bg-red-100 text-red-700",
  "Partially Resolved": "bg-yellow-100 text-yellow-700",
};

function StatusBadge({ status }: { status: Exploit["status"] }) {
  return (
    <span
      className={`inline-flex items-center px-3 py-0.5 rounded-full text-xs font-semibold ${statusStyles[status]}`}
    >
      {status}
    </span>
  );
}

export default function LastExploits() {
  const [exploits, setExploits] = useState<Exploit[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchExploits = async () => {
      try {
        const response = await fetch(
          `${process.env.NEXT_PUBLIC_BASE_URL}/api/exploits?chainId=${process.env.NEXT_PUBLIC_ARB_CHAIN_ID}`
        );

        if (!response.ok) {
          throw new Error("Failed to fetch exploits");
        }

        const data: Exploit[] = await response.json();
        setExploits(data);
      } catch (err: any) {
        setError(err.message || "Something went wrong");
      } finally {
        setLoading(false);
      }
    };

    fetchExploits();
  }, []);

  const headers = ["Date", "Network", "Attack Vector", "Amount Lost", "Status"];

  if (loading) return <p className="text-center text-gray-500">Loading...</p>;
  if (error) return <p className="text-center text-red-500">{error}</p>;

  return (
    <div className="p-6 bg-white">
      <div className="max-w-6xl mx-auto space-y-6">
        <h1 className="text-3xl font-bold text-center text-gray-800">Last Exploits</h1>

        <Card className="border border-gray-200 shadow-sm rounded-lg">
          <CardContent className="p-0">
            <div className="overflow-x-auto">
              <Table className="w-full min-w-[600px] text-gray-800">
                <TableHeader>
                  <TableRow className="bg-gray-100 border-b border-gray-300">
                    {headers.map((header, index) => (
                      <TableHead
                        key={index}
                        className="text-left text-sm font-semibold text-gray-600 px-4 py-3"
                      >
                        {header}
                      </TableHead>
                    ))}
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {exploits.map((exploit, index) => (
                    <TableRow
                      key={index}
                      className="hover:bg-gray-50 border-b border-gray-200"
                    >
                      <TableCell className="px-4 py-3">{exploit.date}</TableCell>
                      <TableCell className="px-4 py-3">{exploit.network}</TableCell>
                      <TableCell className="px-4 py-3">{exploit.attackVector}</TableCell>
                      <TableCell className="px-4 py-3">{exploit.amountLost}</TableCell>
                      <TableCell className="px-4 py-3">
                        <StatusBadge status={exploit.status} />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
